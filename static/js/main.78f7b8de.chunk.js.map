{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","getReorderedGoods","goods","sortType","isReversed","visibleGoods","ALPHABET","sort","first","second","localeCompare","LENGTH","length","NONE","Error","reverse","App","useState","setIsReversed","setSortType","isChanged","className","type","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAcK,SAASC,EACdC,EADK,GAGJ,IADCC,EACF,EADEA,SAAUC,EACZ,EADYA,WAENC,EAAY,YAAOH,GAEzB,OAAQC,GACN,KAAKJ,EAASO,SACZD,EAAaE,MAAK,SAACC,EAAOC,GAAR,OAAmBD,EAAME,cAAcD,MACzD,MACF,KAAKV,EAASY,OACZN,EAAaE,MAAK,SAACC,EAAOC,GAAR,OAAmBD,EAAMI,OAASH,EAAOG,UAC3D,MACF,KAAKb,EAASc,KACZ,MACF,QACE,MAAM,IAAIC,MAAM,oBAGpB,OAAOV,EAAaC,EAAaU,UAAYV,G,SA9B1CN,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAiCE,IAAMiB,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOb,EAAP,KAAmBc,EAAnB,KACA,EAAgCD,mBAASlB,EAASc,MAAlD,mBAAOV,EAAP,KAAiBgB,EAAjB,KAmBMC,EAAYhB,GAAcD,IAAaJ,EAASc,KAEtD,OACE,sBAAKQ,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,yBAAoBlB,IAAaJ,EAASO,UAAY,YAC/DiB,QArByB,WAC/BJ,EAAYpB,EAASO,WAiBjB,iCAQA,wBACEgB,KAAK,SACLD,UAAS,4BAAuBlB,IAAaJ,EAASY,QAAU,YAChEY,QAzBmB,WACzBJ,EAAYpB,EAASY,SAqBjB,4BAQA,wBACEW,KAAK,SACLD,UAAS,6BAAwBjB,GAAc,YAC/CmB,QAzCc,WACpBL,GAAed,IAqCX,qBASEgB,GAEI,wBACEE,KAAK,SACLD,UAAU,4BACVE,QAxCM,WAClBL,GAAc,GACdC,EAAYpB,EAASc,OAmCX,sBAWR,6BACIZ,EAAkBD,EAAiB,CAAEG,WAAUC,eAC9CoB,KAAI,SAAAC,GAAI,OACP,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YCnHpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.78f7b8de.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n// import { render } from 'react-dom';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ninterface State {\n  sortType: SortType,\n  isReversed: boolean,\n}\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: State,\n) {\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.ALPHABET:\n      visibleGoods.sort((first, second) => first.localeCompare(second));\n      break;\n    case SortType.LENGTH:\n      visibleGoods.sort((first, second) => first.length - second.length);\n      break;\n    case SortType.NONE:\n      break;\n    default:\n      throw new Error('Invalid SortType');\n  }\n\n  return isReversed ? visibleGoods.reverse() : visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const handleReverse = () => {\n    setIsReversed(!isReversed);\n  };\n\n  const handleSortAlphabetically = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const handleSortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const handleReset = () => {\n    setIsReversed(false);\n    setSortType(SortType.NONE);\n  };\n\n  const isChanged = isReversed || sortType !== SortType.NONE;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info ${sortType !== SortType.ALPHABET && 'is-light'}`}\n          onClick={handleSortAlphabetically}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success ${sortType !== SortType.LENGTH && 'is-light'}`}\n          onClick={handleSortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning ${!isReversed && 'is-light'}`}\n          onClick={handleReverse}\n        >\n          Reverse\n        </button>\n\n        {\n          isChanged\n            && (\n              <button\n                type=\"button\"\n                className=\"button is-danger is-light\"\n                onClick={handleReset}\n              >\n                Reset\n              </button>\n            )\n        }\n      </div>\n\n      <ul>\n        { getReorderedGoods(goodsFromServer, { sortType, isReversed })\n          .map(good => (\n            <li data-cy=\"Good\" key={good}>{good}</li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}